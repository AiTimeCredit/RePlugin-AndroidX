// utilities

def static replaceVariables(File file, String key, String value) {
    if (!file.exists()) return
    def regex = '\\$\\{' + key + '\\}'
    file.write((file.text =~ /${regex}/).replaceAll(value))
}

def isAndroid() { return project.hasProperty("android") }

def getPropertySafe(name, defaultValue = '') {
    if (hasProperty(name) && getProperty(name).trim() != '') return getProperty(name)
    return defaultValue
}

def getPropertyExt(name, defaultValue = '') {
    if (project.ext.has(name) && project.ext[name] != null) return project.ext[name]
    return getPropertySafe(name, defaultValue)
}

// def pbHelp(){
// 	println(">>> Please make sure MUST-HVAE Properties defined in 'project.ext' or gradle.properties."
// 		+ "\ne.g.: " 
// 		+ "\n PB_USER = hyongbai"
// 		+ "\n PB_ARTIFACT_ID = HelloWorld"
// 	)
// }

def pbUpdateVariables() {
    [
            "src/main/groovy/com/qihoo360/replugin/gradle/host/AppConstant.groovy",
            "src/main/groovy/com/qihoo360/replugin/gradle/plugin/AppConstant.groovy"
    ].forEach { replaceVariables(project.file(it), "RP_VERSION", version) }
}

// pbHelp()

///// CONFIG

apply from: "${buildscript.sourceFile.parent}/rp-config.gradle"

group = getPropertyExt('RP_GROUP')

version = getPropertyExt('RP_VERSION')

artifactId = getPropertyExt('RP_ARTIFACT_ID')

pbUpdateVariables()

//

def pbUser = getPropertyExt('RP_USER')

def pbRepo = getPropertyExt('RP_REPO', 'maven')

def pbEmail = getPropertyExt('RP_EMAIL', pbUser)

def pbUserId = getPropertyExt('RP_USER_ID', pbUser)

def pbUserOrg = getPropertyExt('RP_USERORG', '')

def pbBintayKey = getPropertyExt('RP_BINTRAY_KEY', System.getenv('RP_BINTRAY_KEY'))

//

def pbDesc = getPropertyExt('RP_DESC', 'DONT BE EVIL')

def licenseName = getPropertyExt('RP_LICENSES_NAME', 'The Apache Software License, Version 2.0')

def licenseUrl = getPropertyExt('RP_LICENSES_URL', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

//

def siteUrl = getPropertyExt('RP_SITE', "https://github.com")

def gitUrl = getPropertyExt('RP_GIT_URL', siteUrl)

def issueUrl = getPropertyExt('RP_ISSUE_URL', siteUrl)

println(
        ">>>「publish.gradle」 CONFIGURATIONS:"
                + "\n ${group}:${artifactId}:${version}"
                + "\n ${pbDesc}"
                + "\n Android = ${project.hasProperty("android")}"
                + "\n pbUser = ${pbEmail}"
                + "\n pbSite = ${siteUrl}"
                + "\n gitUrl = ${gitUrl}"
                + "\n issueUrl = ${issueUrl}"
                + "\n License = ${licenseName}(${licenseUrl})"
                + "\n pbBintayKey = ${pbBintayKey}"
)

// task

if (isAndroid()) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        options.encoding "UTF-8"
        options.charSet 'UTF-8'
        options.author true
        options.version true
        failOnError false
    }
} else { // Java libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


// mavenLocal & jcenter conflicts

if (pbBintayKey == null) {
    System.err.println("\n>>>「publish.gradle」bintray access key is EMPTY, UPLOAD LOCAL ONLY!\n")

    ///// publish to LOCAL

    apply plugin: 'maven'
    final def theGroup = group // group will be reset to 'upload'
    uploadArchives {
        repositories.mavenDeployer {
            repository(url: "file://${System.getenv('HOME')}/.m2/repository")
            pom.groupId = theGroup
            pom.version = version
            pom.artifactId = artifactId
        }
    }

    return
}

/////// publish to BINTRAY

apply plugin: 'com.jfrog.bintray'
if (isAndroid()) {
    apply plugin: 'com.github.dcendents.android-maven'
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name artifactId
                url siteUrl
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id pbUser
                        name pbUserId
                        email pbEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

bintray {
    user = pbUser
    key = pbBintayKey
    configurations = ['archives']
    pkg {
        desc = pbDesc
        repo = pbRepo
        name = artifactId
        vcsUrl = gitUrl
        userOrg = pbUserOrg
        websiteUrl = siteUrl
        issueTrackerUrl = issueUrl
        licenses = [licenseName]
        publish = true
    }
}